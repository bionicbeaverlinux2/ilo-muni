---
import Layout from "@layouts/Layout.astro";
import Loader from "@components/Loader.astro";
import IntDropdown from "@components/IntDropdown.astro";
import EpochPicker from "@components/EpochPicker.astro";
import {
  EARLIEST_YEAR,
  LATEST_YEAR,
  LENGTHS,
  SMOOTHINGS,
} from "@utils/constants";

const frontmatter = { title: "Rank by Frequency" };
---

<script>
  import type { Length } from "@utils/types";
  import { fetchRanks } from "@utils/sqlite";
  import { reloadBarChart } from "@utils/ranks";
  import { getRanksParams, toURLParams } from "@utils/urlparams";

  async function updateChart(
    ranksDiv: HTMLDivElement,
    phraseLen: Length,
    minSentLen: Length,
    year: number,
  ) {
    let data = await fetchRanks(phraseLen, minSentLen, year);

    await reloadBarChart(ranksDiv, data, phraseLen);
  }

  async function updatePage(
    ranksDiv: HTMLDivElement,
    phraseLenDropdown: HTMLInputElement,
    sentLenDropdown: HTMLInputElement,
    yearDropdown: HTMLInputElement,
    loader: HTMLSpanElement,
    event: Event | null,
  ) {
    let phraseLen = Number(phraseLenDropdown.value) as Length;
    let sentLen = Number(sentLenDropdown.value) as Length;
    const year = Number(yearDropdown.value);

    if (event?.target === phraseLenDropdown && sentLen < phraseLen) {
      sentLenDropdown.value = phraseLenDropdown.value;
      sentLen = phraseLen;
    }
    if (event?.target === sentLenDropdown && phraseLen > sentLen) {
      phraseLenDropdown.value = sentLenDropdown.value;
      phraseLen = sentLen;
    }

    loader.style.visibility = "visible";
    await updateChart(ranksDiv, phraseLen, sentLen, year);
    loader.style.visibility = "hidden";

    let usedParams: Record<string, string> = {
      phraseLen: phraseLenDropdown.value,
      minSentLen: sentLenDropdown.value,
      year: yearDropdown.value,
    };

    toURLParams(usedParams);
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const sentLenDropdown = document.getElementById(
      "sentLenDropdown",
    )! as HTMLInputElement;
    const phraseLenDropdown = document.getElementById(
      "phraseLenDropdown",
    )! as HTMLInputElement;
    const yearDropdown = document.getElementById(
      "yearDropdown",
    )! as HTMLInputElement;

    const loader = document.getElementById("loader")! as HTMLSpanElement;

    let initialParams = getRanksParams();
    if (initialParams.minSentLen) {
      sentLenDropdown.value = initialParams.minSentLen;
    }
    if (initialParams.phraseLen) {
      phraseLenDropdown.value = initialParams.phraseLen;
    }
    if (initialParams.year) {
      yearDropdown.value = initialParams.year;
    }

    // const ranksDiv = document.getElementById("ranksDiv")! as HTMLDivElement;
    // await updatePage(
    //   ranksDiv,
    //   phraseLenDropdown,
    //   sentLenDropdown,
    //   yearDropdown,
    //   loader,
    //   null,
    // );
    //
    // const form = document.getElementById("ranksForm")! as HTMLFormElement;
    // form.addEventListener("change", async (event) => {
    //   await updatePage(
    //     ranksDiv,
    //     phraseLenDropdown,
    //     sentLenDropdown,
    //     yearDropdown,
    //     loader,
    //     event,
    //   );
    // });
  });
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <div>
      <form id="filterForm" onsubmit="return false;" autocomplete="off">
        <input
          type="text"
          id="searchBox"
          spellcheck="false"
          style="width: 65%; height: 1.6em; font-size: 18px; margin-right: 0.4em;"
        />
        <Loader id="loader" />
      </form>

      <form id="ranksForm" onsubmit="return false;" autocomplete="off">
        <div>
          <IntDropdown
            options={LENGTHS}
            singularText="All sentences"
            pluralText="+ words per sentence"
            id="sentLenDropdown"
          />

          <IntDropdown
            options={SMOOTHINGS}
            pluralText=" smoothing"
            id="smoothingDropdown"
          />
        </div>
        <!-- TODO: all time picker -->

        <div>
          <EpochPicker
            startYear={EARLIEST_YEAR}
            endYear={LATEST_YEAR - 1}
            valueYear={0}
            renderAs="date"
            allTime="true"
            id="yearDropdown"
          />
        </div>
      </form>

      <div class="legend">
        <div class="core">Core</div>
        <div class="common">Common</div>
        <div class="uncommon">Uncommon</div>
        <div class="obscure">Obscure</div>
        <div class="ucsur">UCSUR</div>
        <div class="sandbox">Sandbox</div>
        <div class="">Unknown</div>
        <!-- <div class="pu">pu</div> -->
        <!-- <div class="ku-suli">ku suli</div> -->
        <!-- <div class="ku-lili">ku lili</div> -->
      </div>
    </div>

    <div>
      Hey! This page isn't live yet! How'd you get here? There isn't anything to
      see yet, so best go back to search.
    </div>

    <div id="ranksDiv"></div>
  </div>
</Layout>

<style is:global>
  #ranksDiv > * {
    margin-bottom: 4px;
    padding-left: 4px;
  }
  .rankItem {
    display: flex;
  }

  .legend {
    display: flex;
    flex-wrap: wrap;
    margin: 1em;
  }
  .legend > div {
    border: 2px solid black;
    margin: 0.2em;
    padding: 0.3em;
    font-weight: bold;
  }

  .barData {
    width: 100%;
  }
  .barData div {
    /* height: 1.5em; */
    border: 2px solid black;
    border-right: 0;
    font-weight: bold;
    padding-left: 4px;
    white-space: nowrap;
  }
  .rankBar {
    justify-self: right;
    margin-left: auto;
    border: 2px solid black;
    background-color: gray;
  }
  .core {
    background-color: palegoldenrod;
  }
  .common {
    background-color: skyblue;
  }
  .uncommon {
    background-color: palevioletred;
  }
  .obscure {
    background-color: mediumpurple;
  }
  .sandbox {
    background-color: lightgray;
  }
  .ucsur {
    background-color: lightgreen;
  }
  .unknown {
    background-color: white;
  }

  /* .pu { */
  /*   background-color: lightyellow; */
  /* } */
  /* .ku-suli { */
  /*   background-color: lightgreen; */
  /* } */
  /* .ku-lili { */
  /*   background-color: lightgray; */
  /* } */
</style>
