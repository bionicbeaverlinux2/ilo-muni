---
import Layout from "@layouts/Layout.astro";
import EpochRangePicker from "@components/EpochRangePicker.astro";
import Loader from "@components/Loader.astro";
import IntDropdown from "@components/IntDropdown.astro";
import CategorizedDropdown from "@components/search/CategorizedDropdown.astro";
import IconButton from "@components/IconButton.astro";

import {
  EARLIEST_YEAR,
  LATEST_YEAR,
  LENGTHS,
  SCALES,
  SMOOTHERS,
  SMOOTHINGS,
} from "@utils/constants";

const defaultScale = "rel";
const defaultSmoother = "cwin";

const frontmatter = { title: "ilo Muni" };
---

<script>
  import type {
    Length,
    Scale,
    Smoother,
    Query,
    ProcessedQueries,
    QueryError,
  } from "@utils/types";
  import { inputToQueries } from "@utils/input";
  import { reloadUsageChart } from "@utils/chart";
  import { fetchManyOccurrenceSet } from "@utils/sqlite";
  import { getSearchParams, toURLParams } from "@utils/urlparams";
  import { SCALES } from "@utils/constants";
  import { randomQuery, copyUrlToClipboard } from "@utils/ui";

  let usageCanvas: HTMLCanvasElement;
  let searchBox: HTMLInputElement;
  let sentLenDropdown: HTMLInputElement;
  let scaleDropdown: HTMLInputElement;
  let smootherDropdown: HTMLInputElement;
  let smoothingDropdown: HTMLInputElement;
  let startDropdown: HTMLInputElement;
  let endDropdown: HTMLInputElement;
  let loader: HTMLSpanElement;
  let errorBin: HTMLDivElement;
  let sampleQueryButton: HTMLElement;
  let copyUrlButton: HTMLElement;

  function initFetch() {
    usageCanvas = document.getElementById("usage")! as HTMLCanvasElement;

    searchBox = document.getElementById("searchBox")! as HTMLInputElement;

    sentLenDropdown = document.getElementById(
      "sentLenDropdown",
    )! as HTMLInputElement;
    scaleDropdown = document.getElementById(
      "scaleDropdown",
    )! as HTMLInputElement;

    smootherDropdown = document.getElementById(
      "smootherDropdown",
    )! as HTMLInputElement;
    smoothingDropdown = document.getElementById(
      "smoothingDropdown",
    )! as HTMLInputElement;

    startDropdown = document.getElementById(
      "startDropdown",
    )! as HTMLInputElement;
    endDropdown = document.getElementById("endDropdown")! as HTMLInputElement;

    loader = document.getElementById("loader")! as HTMLSpanElement;
    errorBin = document.getElementById("errorBin")! as HTMLDivElement;

    sampleQueryButton = document.getElementById(
      "sampleQueryButton",
    )! as HTMLElement;
  }

  function dumpErrors(errorBin: HTMLDivElement, errors: QueryError[]) {
    errorBin.innerHTML = "";
    if (errors.length === 0) {
      errorBin.textContent = "";
      return;
    }
    const ul = document.createElement("ul");

    errors.forEach((err) => {
      const li = document.createElement("li");
      li.textContent = `${err.query}: ${err.error}`;
      ul.appendChild(li);
    });

    errorBin.appendChild(ul);
  }

  async function updatePage() {
    const queryText = searchBox.value;
    const sentLen = Number(sentLenDropdown.value) as Length;
    const scale = scaleDropdown.value as Scale;
    const smoother = smootherDropdown.value as Smoother;
    const smoothing = Number(smoothingDropdown.value);
    const start = Number(startDropdown.value);
    const end = Number(endDropdown.value);

    if (SCALES[scale].smoothable) {
      smootherDropdown.disabled = false;
      smoothingDropdown.disabled = false;
      // NOTE: do not disable the smoother dropdown when smoothing is 0
      // it's true that it won't do anything, but it feels Terrible UI wise
    } else {
      smootherDropdown.disabled = true;
      smoothingDropdown.disabled = true;
    }

    loader.style.visibility = "visible";
    let { queries, errors } = await updateChart(
      queryText,
      sentLen,
      scale,
      smoother,
      smoothing,
      start,
      end,
    );
    loader.style.visibility = "hidden";

    if (!queries) {
      return;
    }
    dumpErrors(errorBin, errors);

    // rewrite urlParams with query repr so we don't copy user input error
    let queryReprs = queries.map((query: Query) => query.repr);
    let query = queryReprs.join(", ");
    // the space is technically wasteful but looks better

    let usedParams: Record<string, string> = {
      query: query,
      minSentLen: sentLenDropdown.value,
      scale: scaleDropdown.value,
      start: startDropdown.value,
      end: endDropdown.value,
    };

    if (SCALES[scale].smoothable) {
      usedParams.smoothing = smoothingDropdown.value;
      usedParams.smoother = smootherDropdown.value;
    }

    toURLParams(usedParams);
  }

  async function updateChart(
    input: string,
    minSentLen: Length,
    scale: Scale,
    smoother: Smoother,
    smoothing: number,
    start: number,
    end: number,
  ): Promise<ProcessedQueries> {
    const { queries, errors } = await inputToQueries(input, minSentLen);
    if (queries.length === 0) {
      return { queries, errors };
    }

    const results = await fetchManyOccurrenceSet(
      queries,
      scale,
      smoother,
      smoothing,
      start,
      end,
    );
    if (results.length === 0) {
      queries.forEach((query) => {
        const error: QueryError = {
          query: query.raw,
          error: "No results found for this query.",
        };

        errors.push(error);
      });
      return { queries: [], errors };
    }
    if (results.length < queries.length) {
      const resultTerms = new Set(results.map((result) => result.term));

      queries.forEach((query) => {
        if (!resultTerms.has(query.repr)) {
          const error: QueryError = {
            query: query.repr,
            error: "No results found for this query.",
          };

          errors.push(error);
        }
      });
    }

    await reloadUsageChart(usageCanvas, results);
    return { queries, errors };
  }

  document.addEventListener("DOMContentLoaded", async () => {
    initFetch();

    let initialParams = getSearchParams();
    // aside from query which starts empty, allow defaults of form
    searchBox.value = initialParams.query;
    if (initialParams.minSentLen) {
      sentLenDropdown.value = initialParams.minSentLen;
    }
    if (initialParams.scale) {
      scaleDropdown.value = initialParams.scale;
    }
    if (initialParams.smoothing) {
      smoothingDropdown.value = initialParams.smoothing;
    }
    if (initialParams.start) {
      startDropdown.value = initialParams.start;
    }
    if (initialParams.end) {
      endDropdown.value = initialParams.end;
    }

    // runs chart updates and such
    await updatePage();

    // setup reactivity
    sampleQueryButton.addEventListener("click", async () => {
      searchBox.value = randomQuery();
      await updatePage();
    });
    const form = document.getElementById("usageForm")! as HTMLFormElement;
    form.addEventListener("change", async () => {
      await updatePage();
    });
  });
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <form
      id="usageForm"
      onsubmit="return false;"
      autocomplete="off"
      style="display: inline;"
    >
      <div>
        <input type="text" id="searchBox" spellcheck="false" />
        <Loader id="loader" />
      </div>

      <IntDropdown
        options={LENGTHS}
        singularText="All sentences"
        pluralText="+ words per sentence"
        id="sentLenDropdown"
      />

      <CategorizedDropdown
        id="scaleDropdown"
        options={SCALES}
        selected={defaultScale}
      />

      <CategorizedDropdown
        id="smootherDropdown"
        options={SMOOTHERS}
        selected={defaultSmoother}
      />

      <IntDropdown
        options={SMOOTHINGS}
        pluralText=" smoothing"
        id="smoothingDropdown"
      />
    </form>

    <IconButton id="sampleQueryButton" icon="mingcute:refresh-3-line" />
  </div>

  <div style="position: relative; margin-top: 0.25em; max-height: 100%;">
    <canvas id="usage" style="width: 100%;  max-height: 30em;"></canvas>
    <div id="usageLegend" style="margin-top: 0.75em;"></div>
  </div>

  <div id="errorBin"></div>
</Layout>

<style>
  #searchBox {
    width: 65%;
    height: 1.6em;
    font-size: 18px;
    margin-right: 0.4em;
  }

  @media (orientation: portrait) and (pointer: none),
    (orientation: portrait) and (pointer: coarse) {
    #searchBox {
      width: 85%;
    }
  }
</style>
