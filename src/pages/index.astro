---
import Layout from "@layouts/Layout.astro";
import EpochRangePicker from "@components/EpochRangePicker.astro";
import Loader from "@components/Loader.astro";
import LenDropdown from "@components/LenDropdown.astro";
import {
  EARLIEST_YEAR,
  LATEST_YEAR,
  SCALES,
  SMOOTHERS,
} from "@utils/constants";
import type { Scale, Smoother } from "@utils/types";

type GroupedScales = {
  [category: string]: Array<{ key: string } & (typeof SCALES)[Scale]>;
};
type GroupedSmoothers = {
  [category: string]: Array<{ key: string } & (typeof SMOOTHERS)[Smoother]>;
};

const groupedScales = Object.entries(SCALES).reduce<GroupedScales>(
  (acc, [key, value]) => {
    if (!acc[value.category]) {
      acc[value.category] = [];
    }
    acc[value.category].push({ key, ...value });
    return acc;
  },
  {} as GroupedScales,
);

const groupedSmoothers = Object.entries(SMOOTHERS).reduce<GroupedSmoothers>(
  (acc, [key, value]) => {
    if (!acc[value.category]) {
      acc[value.category] = [];
    }
    acc[value.category].push({ key, ...value });
    return acc;
  },
  {} as GroupedScales,
);

const defaultScale = "rel";
const defaultSmoother = "exp";

const frontmatter = { title: "ilo Muni" };
---

<script>
  import type {
    Length,
    Scale,
    Smoother,
    Query,
    ProcessedQueries,
    QueryError,
  } from "@utils/types";
  import { inputToQueries } from "@utils/input";
  import { reloadUsageChart } from "@utils/chart";
  import { fetchManyOccurrenceSet } from "@utils/sqlite";
  import { getSearchParams, toURLParams } from "@utils/urlparams";
  import { SCALES } from "@utils/constants";

  function dumpErrors(errorBin: HTMLDivElement, errors: QueryError[]) {
    // Clear the error bin first
    errorBin.innerHTML = "";

    // If there are no errors, you might want to display a "No errors" message
    if (errors.length === 0) {
      errorBin.textContent = "";
      return;
    }

    // Create a list to display errors
    const ul = document.createElement("ul");

    // Populate the list with the errors
    errors.forEach((err) => {
      const li = document.createElement("li");
      li.textContent = `${err.query}: ${err.error}`;
      ul.appendChild(li);
    });

    // Append the list to the error bin
    errorBin.appendChild(ul);
  }

  async function updatePage(
    canvas: HTMLCanvasElement,
    searchBox: HTMLInputElement,
    sentLenDropdown: HTMLInputElement,
    scaleDropdown: HTMLInputElement,
    smootherDropdown: HTMLInputElement,
    smoothingDropdown: HTMLInputElement,
    startDropdown: HTMLInputElement,
    endDropdown: HTMLInputElement,
    loader: HTMLSpanElement,
    errorBin: HTMLDivElement,
  ) {
    const queryText = searchBox.value;
    const sentLen = Number(sentLenDropdown.value) as Length;
    const scale = scaleDropdown.value as Scale;
    const smoother = smootherDropdown.value as Smoother;
    const smoothing = Number(smoothingDropdown.value);
    const start = Number(startDropdown.value);
    const end = Number(endDropdown.value);

    // disable smoothness if absolute is set
    // graphing absolute data with smoothness is silly

    if (SCALES[scale].smoothable) {
      smootherDropdown.disabled = false;
      smoothingDropdown.disabled = false;
      // NOTE: do not disable the smoother dropdown when smoothing is 0
      // it's true that it won't do anything, but it feels Terrible UI wise
    } else {
      smootherDropdown.disabled = true;
      smoothingDropdown.disabled = true;
    }

    loader.style.visibility = "visible";
    let { queries, errors } = await updateChart(
      canvas,
      queryText,
      sentLen,
      scale,
      smoother,
      smoothing,
      start,
      end,
    );
    loader.style.visibility = "hidden";

    if (!queries) {
      return;
    }
    dumpErrors(errorBin, errors);

    // rewrite urlParams with query repr so we don't copy user input error
    let queryReprs = queries.map((query: Query) => query.repr);
    let query = queryReprs.join(", ");
    // the space is technically wasteful but looks better

    let usedParams: Record<string, string> = {
      query: query,
      minSentLen: sentLenDropdown.value,
      scale: scaleDropdown.value,
      start: startDropdown.value,
      end: endDropdown.value,
    };

    if (SCALES[scale].smoothable) {
      usedParams.smoothing = smoothingDropdown.value;
      usedParams.smoother = smootherDropdown.value;
    }

    toURLParams(usedParams);
  }

  async function updateChart(
    canvas: HTMLCanvasElement,
    input: string,
    minSentLen: Length,
    scale: Scale,
    smoother: Smoother,
    smoothing: number,
    start: number,
    end: number,
  ): Promise<ProcessedQueries> {
    const { queries, errors } = await inputToQueries(input, minSentLen);
    if (queries.length === 0) {
      return { queries, errors };
    }

    const results = await fetchManyOccurrenceSet(
      queries,
      scale,
      smoother,
      smoothing,
      start,
      end,
    );
    if (results.length === 0) {
      queries.forEach((query) => {
        const error: QueryError = {
          query: query.raw,
          error: "No results found for this query.",
        };

        errors.push(error);
      });
      return { queries: [], errors };
    }
    if (results.length < queries.length) {
      const resultTerms = new Set(results.map((result) => result.term));

      queries.forEach((query) => {
        if (!resultTerms.has(query.repr)) {
          const error: QueryError = {
            query: query.repr,
            error: "No results found for this query.",
          };

          errors.push(error);
        }
      });
    }

    await reloadUsageChart(canvas, results);
    return { queries, errors };
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const searchBox = document.getElementById("searchBox")! as HTMLInputElement;
    const sentLenDropdown = document.getElementById(
      "sentLenDropdown",
    )! as HTMLInputElement;
    const scaleDropdown = document.getElementById(
      "scaleDropdown",
    )! as HTMLInputElement;
    const smootherDropdown = document.getElementById(
      "smootherDropdown",
    )! as HTMLInputElement;
    const smoothingDropdown = document.getElementById(
      "smoothingDropdown",
    )! as HTMLInputElement;
    const startDropdown = document.getElementById(
      "startDropdown",
    )! as HTMLInputElement;
    const endDropdown = document.getElementById(
      "endDropdown",
    )! as HTMLInputElement;

    const loader = document.getElementById("loader")! as HTMLSpanElement;
    const errorBin = document.getElementById("errorBin")! as HTMLDivElement;

    let initialParams = getSearchParams();
    // aside from query which starts empty, allow defaults of form
    searchBox.value = initialParams.query;
    if (initialParams.minSentLen) {
      sentLenDropdown.value = initialParams.minSentLen;
    }
    if (initialParams.scale) {
      scaleDropdown.value = initialParams.scale;
    }
    if (initialParams.smoothing) {
      smoothingDropdown.value = initialParams.smoothing;
    }
    if (initialParams.start) {
      startDropdown.value = initialParams.start;
    }
    if (initialParams.end) {
      endDropdown.value = initialParams.end;
    }

    const usageCanvas = document.getElementById("usage")! as HTMLCanvasElement;
    await updatePage(
      usageCanvas,
      searchBox,
      sentLenDropdown,
      scaleDropdown,
      smootherDropdown,
      smoothingDropdown,
      startDropdown,
      endDropdown,
      loader,
      errorBin,
    );

    const form = document.getElementById("usageForm")! as HTMLFormElement;
    form.addEventListener("change", async () => {
      await updatePage(
        usageCanvas,
        searchBox,
        sentLenDropdown,
        scaleDropdown,
        smootherDropdown,
        smoothingDropdown,
        startDropdown,
        endDropdown,
        loader,
        errorBin,
      );
    });
  });
</script>

<Layout frontmatter={frontmatter}>
  <div>
    <form id="usageForm" onsubmit="return false;" autocomplete="off">
      <div>
        <input type="text" id="searchBox" spellcheck="false" />
        <Loader id="loader" />
      </div>

      <div>
        <LenDropdown
          maxLength={6}
          singularText="All sentences"
          pluralText="+ words per sentence"
          id="sentLenDropdown"
        />

        <!-- TODO: generate this from the list -->

        <select id="scaleDropdown">
          {
            Object.entries(groupedScales).map(([category, scales]) => (
              <optgroup label={category}>
                {scales.map((scale) => (
                  <option
                    value={scale.key}
                    selected={scale.key === defaultScale}
                  >
                    {scale.name}
                  </option>
                ))}
              </optgroup>
            ))
          }
        </select>

        <select id="smootherDropdown">
          {
            Object.entries(groupedSmoothers).map(([category, smoothers]) => (
              <optgroup label={category}>
                {smoothers.map((smoother) => (
                  <option
                    value={smoother.key}
                    selected={smoother.key === defaultSmoother}
                  >
                    {smoother.name}
                  </option>
                ))}
              </optgroup>
            ))
          }
        </select>

        <select id="smoothingDropdown">
          {
            Array.from({ length: 10 }, (_, i) => (
              <option value={i} selected={i === 2}>
                {i} smoothing
              </option>
            ))
          }
          {
            Array.from({ length: 5 }, (_, i) => (
              <option value={(i + 1) * 10}>{(i + 1) * 10} smoothing</option>
            ))
          }
        </select>
        <EpochRangePicker
          startYear={EARLIEST_YEAR}
          endYear={LATEST_YEAR}
          startValueYear={2016}
          startId="startDropdown"
          endId="endDropdown"
          renderAs="date"
        />
      </div>
    </form>
  </div>

  <div style="position: relative; margin-top: 0.25em; max-height: 100%;">
    <canvas id="usage" style="width: 100%;  max-height: 30em;"></canvas>
    <div id="usageLegend" style="margin-top: 0.75em;"></div>
  </div>

  <div id="errorBin"></div>
</Layout>

<style>
  #searchBox {
    width: 65%;
    height: 1.6em;
    font-size: 18px;
    margin-right: 0.4em;
  }

  @media (orientation: portrait) and (pointer: none),
    (orientation: portrait) and (pointer: coarse) {
    #searchBox {
      width: 85%;
    }
  }
</style>
