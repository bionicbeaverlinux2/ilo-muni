---
export interface DropdownItem {
  category: string;
  label: string;
}

export interface CategorizedDropdownConfig {
  options: any;
  selected: string;
  id: string;
  style?: string;
}

const { options, selected, id, style } =
  Astro.props as CategorizedDropdownConfig;

let class_ = "inline";
if (style) {
  class_ = style;
}

type GroupedOptions = {
  [category: string]: Array<{ key: string } & DropdownItem>;
};

const groupedSmoothers = Object.entries(options).reduce<GroupedOptions>(
  (acc, [key, value]) => {
    const item = value as DropdownItem;
    if (!acc[item.category]) {
      acc[item.category] = [];
    }
    acc[item.category].push({ key, ...item });
    return acc;
  },
  {} as GroupedOptions,
);
---

<select id={id} class={class_}>
  {
    Object.entries(groupedSmoothers).map(([category, smoothers]) => (
      <optgroup label={category}>
        {smoothers.map((smoother) => (
          <option value={smoother.key} selected={smoother.key === selected}>
            {smoother.label}
          </option>
        ))}
      </optgroup>
    ))
  }
</select>

<style>
  .inline {
    display: inline;
  }
  .hidden {
    display: hidden;
  }
  .nodisplay {
    display: none;
  }
</style>
